{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"AutoCrudAdmin Documentation Table of Contents Overview Installation Usage Customization Customizing Grid Customizing Form Fields GenerateFormControls Methods Adding Custom Actions Validating Entities Navigation Menu Changing Layout Authentication Handling Files Overriding Views Customizing AutoCrudAdminController Troubleshooting Overview AutoCrudAdmin is a library that provides automatic CRUD (Create, Read, Update, Delete) screens and API endpoints for entity classes in an ASP.NET Core application. Installation Install the AutoCrudAdmin NuGet package in your ASP.NET Core project. dotnet add package AutoCrudAdmin Usage Call services.AddAutoCrudAdmin() in ConfigureServices() in Startup.cs . Call app.UseAutoCrudAdmin() in Configure() in Startup.cs . You have CRUD views and operations for each entity in your DbContexts. You can customize the default behavior by creating a controller that inherits from AutoCrudAdminController<TEntity> where TEntity is the entity class. That's it! AutoCrudAdmin will automatically generate CRUD screens and API endpoints for the entities. The CRUD screens will be available under /ControllerName like /Products , /Customers etc. The API endpoints will be at /ControllerName/Create , /ControllerName/Edit etc. Customization AutoCrudAdmin provides options to customize the generated CRUD screens and API behavior. Customizing Grid The grid view that lists entities on the Index screen can be customized by overriding methods in the controller. For example, to explicitly show certain columns: public class ProductsController : AutoCrudAdminController<Product> { protected override IEnumerable<string> ShownColumnNames => new[] { \"Name\", \"Price\" }; } To add a custom column: protected override IEnumerable<CustomGridColumn<Product>> CustomColumns => new[] { new CustomGridColumn<Product> { Name = \"Discount\", ValueFunc = p => p.CalculateDiscount().ToString(\"0.##\") } }; See Customizing Grid for more details and options. Customizing Form Fields Similarly, the forms for Create and Edit actions can be customized via methods like: ShownFormControlNames HiddenFormControlNames ShownFormControlNamesOnCreate For example: protected override IEnumerable<string> HiddenFormControlNames { new[] { \"Description\" } }; Hides the Description field. See Customizing Forms for more details and options. GenerateFormControls Methods The GenerateFormControls methods are the main way to customize the form fields on Create and Edit pages. See the GenerateFormControls Methods section for details on customizing these methods. Adding Custom Actions Additional controller actions can be added and will show alongside the standard CRUD actions. See Adding Custom Actions . Validating Entities To perform validation, override the EntityValidators method: protected override IEnumerable<Func<Product, Product, ValidatorResult>> EntityValidators { (existing, updated) => { if (updated.Quantity < 0) { return ValidatorResult.Error(\"Invalid quantity\"); } return ValidatorResult.Success(); } }; See Validating Entities for more details. Navigation Menu Generate a menu with links to CRUD screens using the NavHelper : @foreach (var item in NavHelper.GetNavItems()) { <li> <a asp-controller=\"@item\">@item</a> </li> } Changing Layout The default layout is _AutoCrudAdmin_Layout . To use a custom layout: services.AddAutoCrudAdmin(options => { options.LayoutName = \"_CustomLayout\"; }); Authentication Add authentication by providing IAutoCrudAuthFilter implementations: options.Authorization.Add(new MyAuthFilter()); See Authentication for examples. Handling Files The FormFilesContainer class passes files from forms to API endpoints. Files are available in AdminActionContext.Files . See Handling Files for more details. Overriding Views Override default AutoCrudAdmin views by placing view files in: /Views/AutoCrudAdmin/ Customizing AutoCrudAdminController The AutoCrudAdminController base class has many virtual members that can customize CRUD behavior: Customize Grid Customize grid columns: protected override IEnumerable<CustomGridColumn<TEntity>> CustomColumns {..} Add row actions: protected override IEnumerable<GridAction> CustomActions {..} Customize Forms Show/hide form fields: protected override IEnumerable<string> ShownFormControlNames {..} protected override IEnumerable<string> HiddenFormControlNames {..} See API Reference for full customization options. Troubleshooting Some common issues: Ensure DbContext registered properly in ConfigureServices() For navigation menu, controller must inherit from AutoCrudAdminController Check for conflicts with other packages","title":"AutoCrudAdmin Documentation"},{"location":"#autocrudadmin-documentation","text":"","title":"AutoCrudAdmin Documentation"},{"location":"#table-of-contents","text":"Overview Installation Usage Customization Customizing Grid Customizing Form Fields GenerateFormControls Methods Adding Custom Actions Validating Entities Navigation Menu Changing Layout Authentication Handling Files Overriding Views Customizing AutoCrudAdminController Troubleshooting","title":"Table of Contents"},{"location":"#overview","text":"AutoCrudAdmin is a library that provides automatic CRUD (Create, Read, Update, Delete) screens and API endpoints for entity classes in an ASP.NET Core application.","title":"Overview"},{"location":"#installation","text":"Install the AutoCrudAdmin NuGet package in your ASP.NET Core project. dotnet add package AutoCrudAdmin","title":"Installation"},{"location":"#usage","text":"Call services.AddAutoCrudAdmin() in ConfigureServices() in Startup.cs . Call app.UseAutoCrudAdmin() in Configure() in Startup.cs . You have CRUD views and operations for each entity in your DbContexts. You can customize the default behavior by creating a controller that inherits from AutoCrudAdminController<TEntity> where TEntity is the entity class. That's it! AutoCrudAdmin will automatically generate CRUD screens and API endpoints for the entities. The CRUD screens will be available under /ControllerName like /Products , /Customers etc. The API endpoints will be at /ControllerName/Create , /ControllerName/Edit etc.","title":"Usage"},{"location":"#customization","text":"AutoCrudAdmin provides options to customize the generated CRUD screens and API behavior.","title":"Customization"},{"location":"#customizing-grid","text":"The grid view that lists entities on the Index screen can be customized by overriding methods in the controller. For example, to explicitly show certain columns: public class ProductsController : AutoCrudAdminController<Product> { protected override IEnumerable<string> ShownColumnNames => new[] { \"Name\", \"Price\" }; } To add a custom column: protected override IEnumerable<CustomGridColumn<Product>> CustomColumns => new[] { new CustomGridColumn<Product> { Name = \"Discount\", ValueFunc = p => p.CalculateDiscount().ToString(\"0.##\") } }; See Customizing Grid for more details and options.","title":"Customizing Grid"},{"location":"#customizing-form-fields","text":"Similarly, the forms for Create and Edit actions can be customized via methods like: ShownFormControlNames HiddenFormControlNames ShownFormControlNamesOnCreate For example: protected override IEnumerable<string> HiddenFormControlNames { new[] { \"Description\" } }; Hides the Description field. See Customizing Forms for more details and options.","title":"Customizing Form Fields"},{"location":"#generateformcontrols-methods","text":"The GenerateFormControls methods are the main way to customize the form fields on Create and Edit pages. See the GenerateFormControls Methods section for details on customizing these methods.","title":"GenerateFormControls Methods"},{"location":"#adding-custom-actions","text":"Additional controller actions can be added and will show alongside the standard CRUD actions. See Adding Custom Actions .","title":"Adding Custom Actions"},{"location":"#validating-entities","text":"To perform validation, override the EntityValidators method: protected override IEnumerable<Func<Product, Product, ValidatorResult>> EntityValidators { (existing, updated) => { if (updated.Quantity < 0) { return ValidatorResult.Error(\"Invalid quantity\"); } return ValidatorResult.Success(); } }; See Validating Entities for more details.","title":"Validating Entities"},{"location":"#navigation-menu","text":"Generate a menu with links to CRUD screens using the NavHelper : @foreach (var item in NavHelper.GetNavItems()) { <li> <a asp-controller=\"@item\">@item</a> </li> }","title":"Navigation Menu"},{"location":"#changing-layout","text":"The default layout is _AutoCrudAdmin_Layout . To use a custom layout: services.AddAutoCrudAdmin(options => { options.LayoutName = \"_CustomLayout\"; });","title":"Changing Layout"},{"location":"#authentication","text":"Add authentication by providing IAutoCrudAuthFilter implementations: options.Authorization.Add(new MyAuthFilter()); See Authentication for examples.","title":"Authentication"},{"location":"#handling-files","text":"The FormFilesContainer class passes files from forms to API endpoints. Files are available in AdminActionContext.Files . See Handling Files for more details.","title":"Handling Files"},{"location":"#overriding-views","text":"Override default AutoCrudAdmin views by placing view files in: /Views/AutoCrudAdmin/","title":"Overriding Views"},{"location":"#customizing-autocrudadmincontroller","text":"The AutoCrudAdminController base class has many virtual members that can customize CRUD behavior:","title":"Customizing AutoCrudAdminController"},{"location":"#customize-grid","text":"Customize grid columns: protected override IEnumerable<CustomGridColumn<TEntity>> CustomColumns {..} Add row actions: protected override IEnumerable<GridAction> CustomActions {..}","title":"Customize Grid"},{"location":"#customize-forms","text":"Show/hide form fields: protected override IEnumerable<string> ShownFormControlNames {..} protected override IEnumerable<string> HiddenFormControlNames {..} See API Reference for full customization options.","title":"Customize Forms"},{"location":"#troubleshooting","text":"Some common issues: Ensure DbContext registered properly in ConfigureServices() For navigation menu, controller must inherit from AutoCrudAdminController Check for conflicts with other packages","title":"Troubleshooting"},{"location":"actions/","text":"Additional controller actions can be added alongside the default CRUD operations. For example: public class ProductsController : AutoCrudAdminController<Product> { [HttpGet] public IActionResult NotifyLowStock() { // Notify for products with low stock } protected override IEnumerable<GridAction> CustomActions => new GridAction[] { new GridAction { Name = \"Notify Low Stock\", Action = \"NotifyLowStock\" } }; } The CustomActions property adds it as a button on the index grid.","title":"Actions"},{"location":"auth/","text":"The IAutoCrudAuthFilter interface allows implementing custom authorization logic. For example, to require authentication: public class RequireAuthFilter : IAutoCrudAuthFilter { public bool Authorize(HttpContext context) { return context.User.Identity.IsAuthenticated; } } Register in Startup.cs: services.AddAutoCrudAdmin(options => { options.Authorization.Add(new RequireAuthFilter()); }); Can also use declarative attributes like [Authorize] .","title":"Auth"},{"location":"files/","text":"The FormFilesContainer class allows file uploads: public async Task<IActionResult> PostEdit( Product product, FormFilesContainer files) { // Access uploaded files foreach(var file in files.Files) { // save file } } On the view, use: <form asp-action=\"PostEdit\" enctype=\"multipart/form-data\"> </form>","title":"Files"},{"location":"forms/","text":"Ways to customize forms. Show/Hide Fields protected override IEnumerable<string> ShownFormControlNames { // explicit fields } protected override IEnumerable<string> HiddenFormControlNames { // hidden fields } Read-only Fields someFormControl.IsReadOnly = true; GenerateFormControls Methods The GenerateFormControls methods are the main way to customize the form fields generated for Create and Edit pages. There are a few overload options: // Basic signature protected override IEnumerable<FormControlViewModel> GenerateFormControls( TEntity entity, EntityAction action, IDictionary<string, string> entityDict) // With option filters protected override IEnumerable<FormControlViewModel> GenerateFormControls( TEntity entity, EntityAction action, IDictionary<string, string> entityDict, IDictionary<string, Expression<Func<object, bool>>> optionFilters) // Async version protected override async Task<IEnumerable<FormControlViewModel>> GenerateFormControlsAsync(...) The methods return a collection of FormControlViewModel representing each form control. Default Implementation By default, it creates controls for: Primitive properties like strings, numbers. Navigation properties as dropdowns loaded from DbSets. This requires no customization for basic cases. Customizing Defaults You can customize the defaults like: Hide fields protected override IEnumerable<string> HiddenFormControlNames { // fields to hide } Show only certain fields protected override IEnumerable<string> ShownFormControlNames { // fields to show } Make fields read-only formControl.IsReadOnly = true; Adding Custom Controls To add completely custom controls, create and add FormControlViewModel instances: protected override IEnumerable<FormControlViewModel> GenerateFormControls() { // Create custom control var ratingControl = new FormControlViewModel(); // Add to default fields return base.GenerateFormControls().Concat(new[] { ratingControl }); } Overriding Completely For full control, override GenerateFormControls and explicitly build the controls: protected override IEnumerable<FormControlViewModel> GenerateFormControls() { return new FormControlViewModel[] { // Explicitly build controls }; } Let me know if you need any clarification or have additional questions!","title":"Forms"},{"location":"forms/#showhide-fields","text":"protected override IEnumerable<string> ShownFormControlNames { // explicit fields } protected override IEnumerable<string> HiddenFormControlNames { // hidden fields }","title":"Show/Hide Fields"},{"location":"forms/#read-only-fields","text":"someFormControl.IsReadOnly = true;","title":"Read-only Fields"},{"location":"forms/#generateformcontrols-methods","text":"The GenerateFormControls methods are the main way to customize the form fields generated for Create and Edit pages. There are a few overload options: // Basic signature protected override IEnumerable<FormControlViewModel> GenerateFormControls( TEntity entity, EntityAction action, IDictionary<string, string> entityDict) // With option filters protected override IEnumerable<FormControlViewModel> GenerateFormControls( TEntity entity, EntityAction action, IDictionary<string, string> entityDict, IDictionary<string, Expression<Func<object, bool>>> optionFilters) // Async version protected override async Task<IEnumerable<FormControlViewModel>> GenerateFormControlsAsync(...) The methods return a collection of FormControlViewModel representing each form control.","title":"GenerateFormControls Methods"},{"location":"forms/#default-implementation","text":"By default, it creates controls for: Primitive properties like strings, numbers. Navigation properties as dropdowns loaded from DbSets. This requires no customization for basic cases.","title":"Default Implementation"},{"location":"forms/#customizing-defaults","text":"You can customize the defaults like: Hide fields protected override IEnumerable<string> HiddenFormControlNames { // fields to hide } Show only certain fields protected override IEnumerable<string> ShownFormControlNames { // fields to show } Make fields read-only formControl.IsReadOnly = true;","title":"Customizing Defaults"},{"location":"forms/#adding-custom-controls","text":"To add completely custom controls, create and add FormControlViewModel instances: protected override IEnumerable<FormControlViewModel> GenerateFormControls() { // Create custom control var ratingControl = new FormControlViewModel(); // Add to default fields return base.GenerateFormControls().Concat(new[] { ratingControl }); }","title":"Adding Custom Controls"},{"location":"forms/#overriding-completely","text":"For full control, override GenerateFormControls and explicitly build the controls: protected override IEnumerable<FormControlViewModel> GenerateFormControls() { return new FormControlViewModel[] { // Explicitly build controls }; } Let me know if you need any clarification or have additional questions!","title":"Overriding Completely"},{"location":"grid/","text":"Customizing the grid Custom Columns Add custom columns to the index grid view: protected override IEnumerable<CustomGridColumn<TEntity>> CustomColumns { new CustomGridColumn<TEntity> { Name = \"Discount\", ValueFunc = e => e.CalculateDiscount() } }; Shown Columns Explicitly specify shown columns: protected override IEnumerable<string> ShownColumns { new[] { \"Name\", \"Price\" } }; Hidden Columns Hide columns: protected override IEnumerable<string> HiddenColumns { new[] { \"Description\" } }; Custom Row Actions Add custom actions for each grid row: protected override IEnumerable<GridAction> CustomActions { new GridAction { Name = \"Notify\", Action = \"Notify\" } }; Rows Per Page Customize rows per page options: protected override IEnumerable<Tuple<int, string>> PageSizes { new Tuple<int, string>(10, \"10 per page\"), new Tuple<int, string>(50, \"50 per page\") };","title":"Grid"},{"location":"grid/#custom-columns","text":"Add custom columns to the index grid view: protected override IEnumerable<CustomGridColumn<TEntity>> CustomColumns { new CustomGridColumn<TEntity> { Name = \"Discount\", ValueFunc = e => e.CalculateDiscount() } };","title":"Custom Columns"},{"location":"grid/#shown-columns","text":"Explicitly specify shown columns: protected override IEnumerable<string> ShownColumns { new[] { \"Name\", \"Price\" } };","title":"Shown Columns"},{"location":"grid/#hidden-columns","text":"Hide columns: protected override IEnumerable<string> HiddenColumns { new[] { \"Description\" } };","title":"Hidden Columns"},{"location":"grid/#custom-row-actions","text":"Add custom actions for each grid row: protected override IEnumerable<GridAction> CustomActions { new GridAction { Name = \"Notify\", Action = \"Notify\" } };","title":"Custom Row Actions"},{"location":"grid/#rows-per-page","text":"Customize rows per page options: protected override IEnumerable<Tuple<int, string>> PageSizes { new Tuple<int, string>(10, \"10 per page\"), new Tuple<int, string>(50, \"50 per page\") };","title":"Rows Per Page"}]}